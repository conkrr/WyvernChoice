swagger: '2.0'
info:
  description: "Wyvern Choice API"
  version: 1.0.4
  title: "Wyvern Choice API"
 # host: "24hdpfa774.execute-api.us-east-1.amazonaws.com"
schemes:
- "https"
paths:
  #TODO:
    #makeFinalChoice
    #probably executed deleteChoice badly
  
  #don't use curly brackets unless you know page will be reloaded/url will change
  /webpage:
  ##Also generate a link here?
    #Done?
    get:
      operationId: "getListofChoices"
      description: "Get a list of all choices within the current ID."
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ListofChoices"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    #Done?
    post:
      operationId: "createChoice"
      description: "Creates a choice. Admin only"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Choice"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        type: "aws"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
  /webpage/choice/delete:
    #Alter for delete
    post:
      operationId: "deleteChoices"
      description: "Delete all choices that are older than a given date."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "DeleteChoiceRequest"
        required: true
        schema:
          $ref: "#/definitions/DeleteChoiceRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/UpdateResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  
  /webpage/choice:
    #Done?
    get:
      operationId: "getListOfAlternatives"
      description: "Get the list of alternatives currently in the choice."
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
              $ref: "#/definitions/ListofAlternatives"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    
    post:
      operationId: "makeFinalChoice"
      description: "Allows for a user to mark an alternative as the final decision."
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/UpdateResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
  /webpage/choice/login:
    #Done?
    post:
      operationId: "userLogin"
      description: "User logs in. If this is their first time logging in, their name and optional password is added to the database."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "LoginRequest"
        required: true
        schema:
          $ref: "#/definitions/LoginRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/UpdateResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400: 
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    #name of choice
  /webpage/choice/info:
    #Done?
    get:
      operationId: "getChoiceinfo"
      description: "Return the choice name."
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Choice"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  
  /webpage/choice/alternative/approval:
    #related to upvoting
    #Done?
    get:
      operationId: "getUpvotes"
      description: "Get the total amount of upvotes for a given alternative"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Alternative"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
          
    post:
      operationId: "changeUpvoteStatus"
      description: "Register or remove an upvote request a user sends."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "ChangeApprovalRequest"
        required: true
        schema:
          $ref: "#/definitions/ChangeApprovalRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/UpdateResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
      
  /webpage/choice/alternative/disapproval:
    #related to downvoting
    #Done?
    get:
      operationId: "getDownvotes"
      description: "Get the total amount of downvotes for a given alternative"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Alternative"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
          
    post:
      operationId: "changeDownvoteStatus"
      description: "Register or remove a downvote request a user sends."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "ChangeDisapprovalRequest"
        required: true
        schema:
          $ref: "#/definitions/ChangeDisapprovalRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/UpdateResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          
  /webpage/choice/alternative:
    #Related to getting the list of feedback and creating feedback
    #Done?
    get:
      operationId: "getFeedbackList"
      description: "Gets a list of all the feedback sent from various users."
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
              $ref: "#/definitions/ListofFeedback"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    #Done?
    post:
      operationId: "createFeedback"
      description: "Create a new piece of feedback that an individual desires to send."
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
              $ref: "#/definitions/Feedback"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    
  /webpage/choice/alternative/info:
    #Get alternative name (maybe remodel?)
    #Done?
    get:
      operationId: "getAlternativeName"
      description: "Gets the name of the alternative."
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Alternative"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"


  /webpage/choice/alternative/feedback:
    #Get the information within a feedback
    #Done?
    get:
      operationId: "getFeedback"
      description: "Get the user name, message, and timestamp of any given feedback"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Feedback"
        400:
          description: "400 response"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
definitions:
  ListofChoices:
    type: array
    items:
      $ref: "#/definitions/Choice"
    
  Choice:
    type: "object"
    required:
    - "name"
    - "isFinalized"
    - ListofAlternatives
    properties:
      name:
        type: "string"
      isFinalized:
        type: "boolean"
      ListOfAlternatives:
        type: "object"
    
  ListofAlternatives:
    type: array
    items:
      $ref: "#/definitions/Alternative"
  Alternative:
    type: "object"
    required: 
    - "name"
    - "Approvals"
    - "Disapprovals"
    - "isChosen"
    - ListofFeedback
    properties:
      name:
        type: "string"
      Approvals:
        type: "integer"
      Disapprovals:
        type: "integer"
      isChosen:
        type: "boolean"
      ListofFeedback:
        type: "object"
  ListofFeedback:
    type: array
    items:
      $ref: "#/definitions/Feedback"
  Feedback:
    type: "object"
    required:
    - "user"
    - "text"
    - "timestamp"
    properties:
      user: 
        type: "string"
      text: 
        type: "string"
      timestamp: 
        type: "number"
  LoginRequest:
    type: "object"
    required: 
    - "username"
    properties:
      username:
        type: "string"
      password:
        type: "string"
  DeleteChoiceRequest:
    type: "object"
    required:
    - "time"
    properties:
      time: 
        type: "number"
  ChangeApprovalRequest:
    type: "object"
    required: 
    - "alreadyApproved"
    properties:
      alreadyApproved:
        type: "boolean"
  ChangeDisapprovalRequest:
    type: "object"
    required: 
    - "alreadyDisapproved"
    properties:
      alreadyDisapproved:
        type: "boolean"
  UpdateResponse:
    type: "object"
    required:
    - "error"
    - "result"
    - "statusCode"
    properties:
      result:
        type: "string"
      statusCode:
        type: "integer"
      error:
        type: "string"
  
  #consider converting ListOfs into arrays
  #What do we need to add?
  #Feedback
  #
  
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /justgaret23/cs3733wyvern/1.0.4